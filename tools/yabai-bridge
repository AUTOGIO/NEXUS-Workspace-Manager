#!/bin/zsh
# YABAI Bridge - Native macOS Window Management
# Provides YABAI-like functionality without SIP changes

set -euo pipefail

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
RED='\033[0;31m'
NC='\033[0m'

# Function to show help
show_help() {
    echo "${BLUE}üñ•Ô∏è  YABAI Bridge - Native macOS Window Management${NC}"
    echo "====================================================="
    echo ""
    echo "${GREEN}Available commands:${NC}"
    echo "  focus-north    - Focus window north"
    echo "  focus-south    - Focus window south"
    echo "  focus-east     - Focus window east"
    echo "  focus-west     - Focus window west"
    echo "  switch-space   - Switch to space number (1-9)"
    echo "  toggle-float   - Toggle window float"
    echo "  toggle-sticky  - Toggle window sticky"
    echo "  move-north     - Move window north"
    echo "  move-south     - Move window south"
    echo "  move-east      - Move window east"
    echo "  move-west      - Move window west"
    echo "  status         - Show system status"
    echo "  help           - Show this help"
    echo ""
    echo "${YELLOW}Usage:${NC} yabai-bridge [command] [options]"
    echo ""
    echo "${GREEN}Examples:${NC}"
    echo "  yabai-bridge focus-north"
    echo "  yabai-bridge switch-space 2"
    echo "  yabai-bridge toggle-float"
}

# Function to focus window in direction
focus_window() {
    local direction="$1"
    case "$direction" in
        "north"|"up")
            osascript -e 'tell application "System Events" to key code 126 using {command down, shift down}'
            ;;
        "south"|"down")
            osascript -e 'tell application "System Events" to key code 125 using {command down, shift down}'
            ;;
        "east"|"right")
            osascript -e 'tell application "System Events" to key code 124 using {command down, shift down}'
            ;;
        "west"|"left")
            osascript -e 'tell application "System Events" to key code 123 using {command down, shift down}'
            ;;
        *)
            echo "${RED}‚ùå Invalid direction: $direction${NC}"
            return 1
            ;;
    esac
    echo "${GREEN}‚úÖ Focused window $direction${NC}"
}

# Function to switch spaces
switch_space() {
    local space_num="${1:-1}"
    if [[ ! "$space_num" =~ ^[1-9]$ ]]; then
        echo "${RED}‚ùå Invalid space number: $space_num (must be 1-9)${NC}"
        return 1
    fi
    
    local key_code=$((17 + space_num))
    osascript -e "tell application \"System Events\" to key code $key_code using {control down}"
    echo "${GREEN}‚úÖ Switched to space $space_num${NC}"
}

# Function to toggle window properties
toggle_window_property() {
    local property="$1"
    case "$property" in
        "float")
            osascript -e 'tell application "System Events" to key code 3 using {command down, shift down}'
            echo "${GREEN}‚úÖ Toggled window float${NC}"
            ;;
        "sticky")
            osascript -e 'tell application "System Events" to key code 1 using {command down, shift down}'
            echo "${GREEN}‚úÖ Toggled window sticky${NC}"
            ;;
        *)
            echo "${RED}‚ùå Invalid property: $property${NC}"
            return 1
            ;;
    esac
}

# Function to move windows
move_window() {
    local direction="$1"
    case "$direction" in
        "north"|"up")
            osascript -e 'tell application "System Events" to key code 126 using {command down, option down}'
            ;;
        "south"|"down")
            osascript -e 'tell application "System Events" to key code 125 using {command down, option down}'
            ;;
        "east"|"right")
            osascript -e 'tell application "System Events" to key code 124 using {command down, option down}'
            ;;
        "west"|"left")
            osascript -e 'tell application "System Events" to key code 123 using {command down, option down}'
            ;;
        *)
            echo "${RED}‚ùå Invalid direction: $direction${NC}"
            return 1
            ;;
    esac
    echo "${GREEN}‚úÖ Moved window $direction${NC}"
}

# Function to show system status
show_status() {
    echo "${BLUE}üìä YABAI Bridge System Status${NC}"
    echo "================================="
    echo ""
    
    # Check if scripts are executable
    if [[ -x "$0" ]]; then
        echo "${GREEN}‚úÖ YABAI Bridge script is executable${NC}"
    else
        echo "${RED}‚ùå YABAI Bridge script is not executable${NC}"
    fi
    
    # Check Python version
    if command -v python3.11 &>/dev/null; then
        local python_version=$(python3.11 --version 2>&1)
        echo "${GREEN}‚úÖ Python 3.11+ available: $python_version${NC}"
    else
        echo "${RED}‚ùå Python 3.11+ not available${NC}"
    fi
    
    # Check if ~/bin is in PATH
    if [[ ":$PATH:" == *":$HOME/bin:"* ]]; then
        echo "${GREEN}‚úÖ ~/bin is in PATH${NC}"
    else
        echo "${YELLOW}‚ö†Ô∏è  ~/bin is not in PATH${NC}"
    fi
    
    echo ""
    echo "${GREEN}üöÄ System is ready for window management!${NC}"
}

# Main script logic
case "${1:-help}" in
    "focus-north"|"up")
        focus_window "north"
        ;;
    "focus-south"|"down")
        focus_window "south"
        ;;
    "focus-east"|"right")
        focus_window "east"
        ;;
    "focus-west"|"left")
        focus_window "west"
        ;;
    "switch-space")
        switch_space "$2"
        ;;
    "toggle-float")
        toggle_window_property "float"
        ;;
    "toggle-sticky")
        toggle_window_property "sticky"
        ;;
    "move-north"|"move-up")
        move_window "north"
        ;;
    "move-south"|"move-down")
        move_window "south"
        ;;
    "move-east"|"move-right")
        move_window "east"
        ;;
    "move-west"|"move-left")
        move_window "west"
        ;;
    "status")
        show_status
        ;;
    "help"|*)
        show_help
        ;;
esac
