#!/bin/bash
# NEXUS Setup Script
# Initial installation and configuration for NEXUS-workspace-manager

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
PROJECT_DIR="$(dirname "$SCRIPT_DIR")"

echo -e "${BLUE}üöÄ NEXUS Workspace Manager Setup Script${NC}"
echo "============================================="
echo "Setting up NEXUS AI-Powered Workspace Intelligence system..."
echo ""

# Check if we're in the right directory
if [ ! -f "$PROJECT_DIR/pyproject.toml" ]; then
    echo -e "${RED}‚ùå Error: pyproject.toml not found.${NC}"
    echo "Please run this script from the NEXUS-workspace-manager project directory."
    exit 1
fi

# Check Python version
echo -e "${BLUE}üìã Checking Python version...${NC}"
if ! command -v python3.11 &> /dev/null; then
    echo -e "${YELLOW}‚ö†Ô∏è  Python 3.11 not found.${NC}"
    echo "Please install Python 3.11+ before continuing."
    echo "You can install it with: brew install python@3.11"
    exit 1
fi

PYTHON_VERSION=$(python3.11 --version 2>&1 | awk '{print $2}')
echo -e "${GREEN}‚úÖ Python $PYTHON_VERSION found${NC}"

# Check uv package manager
echo -e "${BLUE}üì¶ Checking uv package manager...${NC}"
if ! command -v uv &> /dev/null; then
    echo -e "${YELLOW}‚ö†Ô∏è  uv not found. Installing...${NC}"
    curl -LsSf https://astral.sh/uv/install.sh | sh
    source ~/.cargo/env
fi

UV_VERSION=$(uv --version)
echo -e "${GREEN}‚úÖ uv $UV_VERSION found${NC}"

# Create virtual environment
echo -e "${BLUE}üêç Creating virtual environment...${NC}"
cd "$PROJECT_DIR"
if [ -d ".venv" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Virtual environment already exists. Removing...${NC}"
    rm -rf .venv
fi

uv venv --python 3.11

# Activate virtual environment
echo -e "${BLUE}üîß Activating virtual environment...${NC}"
source .venv/bin/activate

# Install dependencies from pyproject.toml
echo -e "${BLUE}üì• Installing dependencies from pyproject.toml...${NC}"
uv pip install -e .

# Make bin scripts executable
echo -e "${BLUE}üîê Making bin scripts executable...${NC}"
chmod +x bin/*

# Create necessary directories
echo -e "${BLUE}üìÅ Creating necessary directories...${NC}"
mkdir -p data/logs
mkdir -p data/cache
mkdir -p data/models
mkdir -p configs/profiles
mkdir -p configs/layouts
mkdir -p configs/environments

# Create basic configuration files if they don't exist
echo -e "${BLUE}‚öôÔ∏è  Setting up configuration files...${NC}"

# Create nexus.yaml if it doesn't exist
if [ ! -f "configs/nexus.yaml" ]; then
    cat > configs/nexus.yaml << 'EOF'
# NEXUS Configuration File
# AI-Powered Workspace Intelligence Configuration

# System Settings
system:
  log_level: INFO
  log_file: data/logs/nexus.log
  cache_dir: data/cache
  models_dir: data/models

# YABAI Integration
yabai:
  enabled: true
  config_file: configs/yabai/yabai_config.yaml
  auto_start: true

# AI Model Settings
ai:
  provider: lm_studio
  endpoint: http://localhost:1234
  model: local_model
  temperature: 0.7
  max_tokens: 1000

# Workspace Profiles
profiles:
  default: personal
  auto_switch: false
  profiles_dir: configs/profiles

# Layout Management
layouts:
  auto_save: true
  layouts_dir: configs/layouts
  default_layout: standard

# Logging
logging:
  level: INFO
  file: data/logs/nexus.log
  max_size: 10MB
  backup_count: 5
EOF
    echo -e "${GREEN}‚úÖ Created configs/nexus.yaml${NC}"
fi

# Create .env file if it doesn't exist
if [ ! -f ".env" ]; then
    cat > .env << 'EOF'
# NEXUS Environment Variables
# Copy from nexus.env.example and customize

# API Keys (optional)
# OPENAI_API_KEY=your_openai_api_key_here
# ANTHROPIC_API_KEY=your_anthropic_api_key_here

# NEXUS Settings
NEXUS_LOG_LEVEL=INFO
NEXUS_CONFIG_FILE=configs/nexus.yaml
NEXUS_CURRENT_PROFILE=personal

# Development Settings
NEXUS_DEBUG=false
NEXUS_VERBOSE=false
EOF
    echo -e "${GREEN}‚úÖ Created .env file${NC}"
fi

# Check YABAI installation
echo -e "${BLUE}üñ•Ô∏è  Checking YABAI installation...${NC}"
if ! command -v yabai &> /dev/null; then
    echo -e "${YELLOW}‚ö†Ô∏è  YABAI not found.${NC}"
    echo "Please install YABAI for window management features:"
    echo "  brew install yabai"
    echo "  brew install skhd"
    echo ""
    echo "After installation, you may need to:"
    echo "  1. Allow YABAI in System Preferences > Security & Privacy"
    echo "  2. Start YABAI: brew services start yabai"
    echo "  3. Start SKHD: brew services start skhd"
else
    YABAI_VERSION=$(yabai --version)
    echo -e "${GREEN}‚úÖ YABAI $YABAI_VERSION found${NC}"
    
    # Check if YABAI is running
    if pgrep -x "yabai" > /dev/null; then
        echo -e "${GREEN}‚úÖ YABAI is running${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  YABAI is not running${NC}"
        echo "Start YABAI with: brew services start yabai"
    fi
fi

# Check LM Studio
echo -e "${BLUE}ü§ñ Checking LM Studio...${NC}"
if curl -s http://localhost:1234/v1/models > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ LM Studio server is running${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  LM Studio server not running${NC}"
    echo "Please start LM Studio and ensure it's running on localhost:1234"
    echo "This is required for AI-powered workspace optimization features."
fi

# Test CLI modules
echo -e "${BLUE}üß™ Testing CLI modules...${NC}"
cd "$PROJECT_DIR"
source .venv/bin/activate

# Test if modules can be imported
if python -c "from nexus.cli import main, ai_optimize, profile_switcher, quick_menu; print('‚úÖ All CLI modules imported successfully')" 2>/dev/null; then
    echo -e "${GREEN}‚úÖ CLI modules import test passed${NC}"
else
    echo -e "${RED}‚ùå CLI modules import test failed${NC}"
    echo "There may be an issue with the module structure or dependencies."
fi

# Test bin scripts
echo -e "${BLUE}üîß Testing bin scripts...${NC}"
if [ -x "bin/nexus" ]; then
    echo -e "${GREEN}‚úÖ nexus script is executable${NC}"
else
    echo -e "${RED}‚ùå nexus script is not executable${NC}"
fi

if [ -x "bin/nexus-ai-optimize" ]; then
    echo -e "${GREEN}‚úÖ nexus-ai-optimize script is executable${NC}"
else
    echo -e "${RED}‚ùå nexus-ai-optimize script is not executable${NC}"
fi

if [ -x "bin/nexus-profile-switcher" ]; then
    echo -e "${GREEN}‚úÖ nexus-profile-switcher script is executable${NC}"
else
    echo -e "${RED}‚ùå nexus-profile-switcher script is not executable${NC}"
fi

if [ -x "bin/nexus-quick-menu" ]; then
    echo -e "${GREEN}‚úÖ nexus-quick-menu script is executable${NC}"
else
    echo -e "${RED}‚ùå nexus-quick-menu script is not executable${NC}"
fi

# Setup complete
echo ""
echo -e "${GREEN}üéâ NEXUS Workspace Manager setup completed successfully!${NC}"
echo ""
echo -e "${BLUE}üìã Next steps:${NC}"
echo "1. Add to your PATH: export PATH=\"$PWD/bin:\$PATH\""
echo "2. Test the system: nexus-quick-menu"
echo "3. Check status: nexus status"
echo "4. List profiles: nexus-profile-switcher --list"
echo "5. Run AI optimization: nexus-ai-optimize --ai"
echo ""
echo -e "${BLUE}üîß Configuration:${NC}"
echo "- Edit configs/nexus.yaml for system settings"
echo "- Edit .env for environment variables"
echo "- Create profiles in configs/profiles/"
echo "- Customize layouts in configs/layouts/"
echo ""
echo -e "${BLUE}üìö Documentation:${NC}"
echo "- README.md: Quick start and overview"
echo "- docs/: Comprehensive documentation"
echo "- bin/*: Available commands"
echo ""
echo -e "${BLUE}üêõ Troubleshooting:${NC}"
echo "- Check logs in data/logs/"
echo "- Verify virtual environment: source .venv/bin/activate"
echo "- Test imports: python -c 'from nexus.cli import *'"
echo ""
echo -e "${GREEN}üöÄ Welcome to NEXUS Workspace Manager!${NC}"
