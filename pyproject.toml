[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "nexus"
version = "1.0.0"
description = "AI-Powered Workspace Intelligence for Apple Silicon - Enhanced with 15 BetterTouchTool gestures, 18 Keyboard Maestro macros, 16 Apple Shortcuts, and AI-powered workspace optimization"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "Eduardo Giovannini", email = "eduardo@giovannini.dev"}
]
maintainers = [
    {name = "Eduardo Giovannini", email = "eduardo@giovannini.dev"}
]
keywords = [
    "ai", "workspace", "productivity", "automation", "yabai", "macos", 
    "apple-silicon", "bettertouchtool", "keyboard-maestro", "apple-shortcuts",
    "gesture-control", "ai-optimization", "workspace-management"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: End Users/Desktop",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: MacOS",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Desktop Environment",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: System :: Systems Administration",
    "Topic :: Utilities",
    "Typing :: Typed"
]

dependencies = [
    "python-dotenv>=1.0.0",
    "pydantic>=2,<3",
    "httpx>=0.25.0",
    "aw-client>=0.4.0",
    "pandas>=2.0.0",
    "seaborn>=0.12.0",
    "psutil>=5.9.0",
    "pyyaml>=6.0.1",
    "click>=8.1.0",
    "rich>=13.0.0",
    "typer>=0.9.0",
    "streamlit>=1.28.0",
    "plotly>=5.17.0",
    "numpy>=1.24.0",
    "matplotlib>=3.7.0"
]

[project.optional-dependencies]
mlx = [
    "mlx>=0.0.8",
    "mlx-lm>=0.0.4"
]
n8n = [
    "n8n>=1.0.0"
]
analytics = [
    "activitywatch>=0.12.0",
    "jupyter>=1.0.0",
    "ipykernel>=6.0.0"
]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "mypy>=1.5.0",
    "ruff>=0.1.0",
    "pre-commit>=3.3.0"
]

[project.urls]
Homepage = "https://github.com/yourusername/nexus"
Documentation = "https://github.com/yourusername/nexus#readme"
Repository = "https://github.com/yourusername/nexus.git"
Issues = "https://github.com/yourusername/nexus/issues"
Discussions = "https://github.com/yourusername/nexus/discussions"
Wiki = "https://github.com/yourusername/nexus/wiki"

[project.scripts]
nexus = "nexus.cli.main:main"
nexus-launcher = "nexus.core.launcher:main"
nexus-ai = "nexus.core.ai_model_manager:main"

[tool.uv]
index-url = "https://pypi.org/simple"
extra-index-urls = [
    "https://pypi.org/simple"
]

[tool.black]
target-version = ['py311', 'py312']
line-length = 88
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "streamlit.*",
    "plotly.*",
    "seaborn.*",
    "matplotlib.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "-q",
    "--strict-markers",
    "--strict-config",
    "--cov=src/nexus",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml"
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "ai: marks tests as AI-related tests",
    "yabai: marks tests as YABAI-related tests"
]

[tool.coverage.run]
source = ["src/nexus"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

[tool.pre-commit]
repos = [
    {
        repo = "https://github.com/pre-commit/pre-commit-hooks",
        rev = "v4.4.0",
        hooks = [
            {id = "trailing-whitespace"},
            {id = "end-of-file-fixer"},
            {id = "check-yaml"},
            {id = "check-added-large-files"},
            {id = "check-merge-conflict"},
        ]
    },
    {
        repo = "https://github.com/psf/black",
        rev = "23.7.0",
        hooks = [{id = "black"}]
    },
    {
        repo = "https://github.com/charliermarsh/ruff-pre-commit",
        rev = "v0.1.6",
        hooks = [{id = "ruff", args = ["--fix"]}]
    }
]

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"]
